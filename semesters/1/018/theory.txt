Function f {[] (double x) -> double {return x*x}, ...}
[] - блок захвата нужен для подтягивания более внешних переменных
std::function<double (double)> f;
auto x = [] (double d) {...};// переменной присваивается лямбда-выражение
//Зачем это нужно?
лямбда-функции закрывают очень важный недостаток: отсутствие вложенных функций
неверный синтаксис:
int Outer(){
    int Inner() {...}
}

верный синтаксис:
int Outer(){
    auto Inner = [] (...) {...};
}

//реализация, которую необходимо будет копировать для каждого отдельного случая
void DoSmth (std::ostream & os){
    os << "DoSmth: " << "message" << std::endl;
}

boiler-blade code - шаблонный, нетворческий код

//нормальная реализация (чтобы log("message");)
auto log = [& os] (const std::string& message){ //блок захвата для доступа к os
    os << "log: " << message << std:endl;
};

[&] - захват ссылками всего, что есть в области
[=] - захват копированием
