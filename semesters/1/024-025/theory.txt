vector<int*> 
{
	int ** p{nullptr};
	size_t sz{0};
	size_t space{0};
	// а вообще всё это в конструкторе
}

r_value может быть связано с процессом схлопывания (когда используем шаблоны)

allocator сам определяет как выделить память и как её освободить
выделить/освободить, сконуструировать/уничтожить
пример с new. как выделить память, но не конструировать?
class A
{
	
};

A* ptr = static_cast<A*>(new char[sizeof(A)*3]);
// указатели типа char переписали в указатели типа A
// т.к. у чара конструктора по умолчанию нету, то мы не вызываем конструктора
A* elems = new(ptr) A[3]; // явно указали на то место в памяти, в котором конструируем
три наши объекта
elems->~A;
delete[] static_cast<char*>(ptr);

C++ : new-delete
C : malloc-free

template<typename (или class) T, typename A = allocator>
class vector : private vector_base<T,A>
// при таком наследовании все поля vector_base становятся private в vector

концепт определяет условия или ограничения 
ограничения: должно быть разрешено копирование
unique_ptr тоже нельзя копировать

Singleton - класс, объект которого может быть создан в единственном экземпляре
у него запрет на конструктор, а создаёт его функция, которая и проверяет единственное создание
удаляется он тоже через функцию
1) класс со статическими классами и методами
2) через статическую переменную внутри функции
int counter()
{
	static int count = 0;
	// эта переменная глоблальна, но область её видисомсти только внутри функции
}

class Loger
{
	private:
		Loger();
		Loger(const &Loger) = delete;
	public:
		/.../
		static Loger& get_instance()
		{
			static Loger loger();
			return Loger();
		}
};

3) если нужно использовать минимум памяти и создание необязательно, можно использовать указатели

в стеке (разделе памяти программы) также сохраняется служебная информация (типо записи 
активации функции)

преимущество в скорости работы стэка завязано на кэше
помимо одной переменной, мы записываем в кэш еще доп информацию
а доступ к кэшу на порядок быстрее, чем к куче

работа с кучей гораздо медленнее из-за того, что есть свободное пространство и искать, 
где находится элемент там дольше

list работает еще медленее чем vector, так как хранит свои элементы в разных местах, но
гораздо бысрее удаляет элементы, так как знает и свой и предыдущий

известные контейнеры:
set
map
vector
array
string
list
queue
stack

E.h:
struct E_except{};

class E
{
	private:
		static size_t count;
	public:
		E(){++count;
			if(count > 10) throw E()}
}

new = конструктор + выделение памяти





Зачем нужен аллокатор?
Аллокатор это что-то вроде обёртки на C-шный malloc

class Int { // класс без конструктора по умолчанию
	int i;
	public:
		Int(int i): i{i} {}

};

std::vector<Int> v_int(5, Int(10));
Int* i_ptr = new Int[5]{0, 1, 2, 3, 4};

// вариант без аллокатора
void* p = malloc(5*sizeof(Int));
// может вернуть nullptr, если невозможно освободить ресурс
Int* i_ptr = static_cast<Int*>(p);

// варинат с аллокатором
std::allocator<Int> alloc; // возвращает указатель Int*
Int* i_ptr = alloc.allocate(5);
alloc.deallocate(i_ptr, 5);

//после этого
for(size_t i = 0; i < 5; i++)
{
	new(i_ptr + i) Int(i);
}

for(size_t i = 0; i < 5; i++)
{
	// в этом случае компилятор сам добавит деструктор
	i_ptr[].~Int();
}

// вариант без аллокатора
free(i_ptr);

// варинат с аллокатором
alloc.deallocate(i_ptr, 5);

Отличие базовых типов от пользовательских:
конструктор по умолчанию не вызывается неявно
нельзя наследовать 