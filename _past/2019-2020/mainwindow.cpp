/* Первое, что нужно сделать, это разобраться с так называемыми СИГНАЛАМИ и
 * СЛОТАМИ.
 * Сигналы и слоты, это на самом деле просто...
 * Можно представить, например, занятие в школе... класс...
 * Учитель, скажем, говорит: А теперь записываем домашнее задание.
 * Его фраза - это сигнал.
 * Ученики услышав этот сигнал выполняют определённые действия.
 * У каждого из них - это действие может быть своё: Иванов открыл дневник и записывает,
 * Петров делает вид, что записывает, а Сидоров делает вид, что не слышал.
 * Действия, которые они выполняют, это и есть СЛОТы.
 * Получается:
 * Учитель даёт сигнал, ученик выполняет слот.
 * В библиотке Qt есть такая специальная функция, которая устонавливает
 * связь между сигналом и слотом. Это функция connect.
 * connect(источник, сигнал, приёмник, слот)
 * Если попробовать вписать в неё учителя и учеников, то получится:
 * connect(учитель,"Записываем дз", Петров, Делать_вид)
 * И сигнал, и слот должны быть объявлены специальным образом, но...
 * Так как большинство объектов, которые мы используем, являются наследниками
 * каких-то "основных" объектов, то у них уже всё это объявлено, и нам остаётся
 * только выбрать указать слот. Это очень просто сделать в режиме дизайна.
 * В качестве примера попробуем назначить слот для кнопки Пропустить.
 * Перейди в дизайн, найди на первой вкладке кнопку Пропустить,
 * нажми правую кнопку мыши на кнопке,
 * в меню нужно выбрать Перейти к слоту,
 * а в окне выбрать слот clicked()
 * В коде mainwindow.cpp появится пустая реализация
 * void MainWindow::on_pushButton_clicked()
 * а в коде файла mainwindow.h  появится объявление.
 * Нам не надо писать функцию connect, так как мы используем "уже готовый" сигнал,
 * QtCreator сам допишет необходимую информацию, чтобы избавить нас от лишних хлопот.
 * Чтобы убедиться, что что-то происходит, когда мы кликнем по кнопке,
 * добавь вызов стандартного MessageBox. Это стандартное системное окно Windows,
 * хотя в  Qt, оно реализовано с дополнительными возможностями.
 * Подключи библиотеку QMessageBox (#include <QMessageBox>)
 * А в реализации on_pushButton_clicked()
 * напиши вызов:
 * QMessageBox::information(this,"Окно...","Привет, я окно MessageBox, а ты кто?");
 * Если сейчас скомпилировать программу, то с большой вероятностью ты увидишь
 * странные кракозябры вместо русских букв. Да, это Windows XP... но в данном случае,
 * это исправляется очень легко. Добавим ещё одну библиотеку
 * #include <QTextCodec>
 * а перед вызовом системного окна (пока так, потом перенесём
 * в другое место)код, который "всё поправит". Что конкретно делает этот код, я
 * расскажу потом.
 * Всё вместе получится так:
 *
void MainWindow::on_pushButton_clicked()
{
    QTextCodec *codec = QTextCodec::codecForName("utf-8");
    QTextCodec::setCodecForTr(codec);
    QTextCodec::setCodecForCStrings(codec);
    QTextCodec::setCodecForLocale(codec);
    QMessageBox::information(this,"Окно...","Привет, я окно MessageBox, а ты кто?");
}
 * Компилируй, запускай, нажимай кнопку.
 * Если всё получилось, то двигаемся дальше.
 * Теперь нужно научится переходить по вкладкам. Это просто.
 * Можно пока закомментировать строку с MessageBox и
 * добавить вместо этого строку, для перехода на вкладку с пользователями.
 * Чтобы переключиться между вкладками нам потребуется обратиться к тому виджету,
 * который содержит внутри себя эти вкладки и у него вызвать метод, который
 * меняет текущую вкладку.
 * Получится такой путь:
 * Итерфейс -> объект_с_вкладками -> сделать_активной_вкладку(1)
 * 1 - это индекс вкладки (начинаются с нуля, индекс вкладки можно посмотреть
 * в Дизайне, переключившись на нужную вкладку и посмотрев свойство currentIndex).
 * Теперь тоже самое только на с++
 * ui->tableWidget->setCurrentIndex(1);
 * Добавь это в on_pushButton_clicked()
 * и скомпилируй.
 * Если всё хорошо, то можно открывать следующую версию проекта (project7-2).
 *
 * */
#include "mainwindow.h"
#include "ui_mainwindow.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
}

MainWindow::~MainWindow()
{
    delete ui;
}


